import java.io.*;
import java.net.*;

public class TicTacToeServer {
    private static char[][] board = {
            {'1', '2', '3'},
            {'4', '5', '6'},
            {'7', '8', '9'}
    };
    private static int currentPlayer = 1;

    public static void main(String[] args) {
        try (ServerSocket serverSocket = new ServerSocket(5000)) {
            System.out.println("Server is waiting for players...");

            Socket player1 = serverSocket.accept();
            System.out.println("Player 1 connected!");
            PrintWriter out1 = new PrintWriter(player1.getOutputStream(), true);
            BufferedReader in1 = new BufferedReader(new InputStreamReader(player1.getInputStream()));
            out1.println("You are Player 1 (X). Waiting for Player 2...");

            Socket player2 = serverSocket.accept();
            System.out.println("Player 2 connected!");
            PrintWriter out2 = new PrintWriter(player2.getOutputStream(), true);
            BufferedReader in2 = new BufferedReader(new InputStreamReader(player2.getInputStream()));
            out2.println("You are Player 2 (O). Game is starting...");
            out1.println("Player 2 has joined. Game is starting...");

            while (true) {
                PrintWriter currentOut = (currentPlayer == 1) ? out1 : out2;
                BufferedReader currentIn = (currentPlayer == 1) ? in1 : in2;
                currentOut.println("Your turn. Enter position (1-9):");

                int move = Integer.parseInt(currentIn.readLine());
                if (!makeMove(move, currentPlayer == 1 ? 'X' : 'O')) {
                    currentOut.println("Invalid move. Try again.");
                    continue;
                }
                sendBoard(out1, out2);

                if (checkWin()) {
                    currentOut.println("You win!");
                    PrintWriter opponentOut = (currentPlayer == 1) ? out2 : out1;
                    opponentOut.println("You lose!");
                    break;
                }
                currentPlayer = (currentPlayer == 1) ? 2 : 1;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static boolean makeMove(int move, char symbol) {
        int row = (move - 1) / 3;
        int col = (move - 1) % 3;
        if (board[row][col] == 'X' || board[row][col] == 'O') return false;
        board[row][col] = symbol;
        return true;
    }

    private static void sendBoard(PrintWriter out1, PrintWriter out2) {
        for (char[] row : board) {
            String line = new String(row);
            out1.println(line);
            out2.println(line);
        }
    }

    private static boolean checkWin() {
        for (int i = 0; i < 3; i++) {
            if (board[i][0] == board[i][1] && board[i][1] == board[i][2]) return true;
            if (board[0][i] == board[1][i] && board[1][i] == board[2][i]) return true;
        }
        return (board[0][0] == board[1][1] && board[1][1] == board[2][2]) || 
               (board[0][2] == board[1][1] && board[1][1] == board[2][0]);
    }
}
